<?xml version="1.0" encoding="UTF-8"?>  
<configuration scan="true">  

    <property name="log.root.level" value="info" /> <!-- 日志级别 -->  
    <property name="log.other.level" value="DEBUG" /> <!-- 其他日志级别 -->  
    <property name="log.moduleName" value="myapp" />  <!-- 模块名称， 影响日志配置名，日志文件名 -->  
    <!--日志文件的保存路径,首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为data/logs目录做日志存放的目录 -->
    <property name="log.base" value="${log.dir:-data/logs}/${log.moduleName}" />  
    <property name="log.max.size" value="100MB" /> <!-- 日志文件大小,超过这个大小将被压缩 -->  
    
  	 <!--  邮件属性配置  -->
    <!-- SMTP server的地址，必需指定。如网易的SMTP服务器地址是： smtp.163.com -->
    <property name="smtpHost" value="smtp.qq.com"/><!--填入要发送邮件的smtp服务器地址-->
    <!-- SMTP server的端口地址。默认值：25 -->
    <property name="smtpPort" value="25"/>
    <!-- 发送邮件账号，默认为null -->
    <property name="username" value="347792253@qq.com"/><!--发件人账号-->
    <!-- 发送邮件密码，默认为null。（qq邮箱中开启smtp服务后可获取到） -->
    <property name="password" value="xxxx"/><!--发件人密码-->
    <!-- 如果设置为true，appender将会使用SSL连接到日志服务器。默认值：false -->
    <property name="SSL" value="false"/>
    <!-- 指定发送到那个邮箱，可设置多个<to>属性，指定多个目的邮箱 -->
    <property name="email_to" value="yqz19920528@163.com"/><!--收件人账号多个可以逗号隔开-->
    <!-- 指定发件人名称。如果设置成“&lt;ADMIN&gt; ”，则邮件发件人将会是“<ADMIN> ”  最好设置和username一致，比如qq邮箱则不允许指定发件人名称为其它-->
    <property name="email_from" value="347792253@qq.com" />
    <!-- 指定emial的标题，它需要满足PatternLayout中的格式要求。如果设置成“Log: %logger - %msg ”，就案例来讲，则发送邮件时，标题为“【Error】: com.foo.Bar - Hello World ”。 默认值："%logger{20} - %m". -->
    <property name="email_subject" value="【Error】: %logger" />
  
    <!--控制台输出 -->  
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">  
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">  
            <Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n</Pattern>  
        </encoder>  
    </appender>  
  
    <!-- 用来保存输出所有级别的日志 -->  
    <appender name="file.all" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <File>${log.base}/${log.moduleName}_all.log</File><!-- 设置日志不超过${log.max.size}时的保存路径，注意如果   
            是web项目会保存到Tomcat的bin目录 下 -->  
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <FileNamePattern>${log.base}/archive/${log.moduleName}_all_%d{yyyy-MM-dd}.%i.log.zip  
            </FileNamePattern>  
            <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->  
            <timeBasedFileNamingAndTriggeringPolicy  
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <maxFileSize>${log.max.size}</maxFileSize>  
            </timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <!-- 日志输出的文件的格式 -->  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method:%L -%msg%n</pattern>  
        </layout>  
    </appender>  
      
    <!-- 这也是用来保存输出所有级别的日志 -->  
    <appender name="file.all.other" class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <File>${log.base}/${log.moduleName}_other.log</File>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <FileNamePattern>${log.base}/archive/${log.moduleName}_other_%d{yyyy-MM-dd}.%i.log.zip  
            </FileNamePattern>  
            <timeBasedFileNamingAndTriggeringPolicy  
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <maxFileSize>${log.max.size}</maxFileSize>  
            </timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n</pattern>  
        </layout>  
    </appender>  
  
    <!-- 只用保存输出error级别的日志 -->  
    <appender name="file.error"  
        class="ch.qos.logback.core.rolling.RollingFileAppender">  
        <File>${log.base}/${log.moduleName}_err.log</File>  
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
            <FileNamePattern>${log.base}/archive/${log.moduleName}_err_%d{yyyy-MM-dd}.%i.log.zip  
            </FileNamePattern>  
            <timeBasedFileNamingAndTriggeringPolicy  
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
                <maxFileSize>${log.max.size}</maxFileSize>  
            </timeBasedFileNamingAndTriggeringPolicy>  
        </rollingPolicy>  
        <layout class="ch.qos.logback.classic.PatternLayout">  
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L - %msg%n</pattern>  
        </layout>  
        <!-- 下面为配置只输出error级别的日志 -->  
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>ERROR</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
    </appender>  
  
   <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->  
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->  
    <!-- 添加附加的appender,最多只能添加一个 -->  
    <appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">  
        <discardingThreshold>0</discardingThreshold>  
        <queueSize>256</queueSize>  
        <includeCallerData>true</includeCallerData>  
        <appender-ref ref="file.all" />  
    </appender>  
  
　　<!-- 使用异步来记录其他信息-->
    <appender name="file.async.other" class="ch.qos.logback.classic.AsyncAppender">  
        <discardingThreshold>0</discardingThreshold>  
        <queueSize>256</queueSize>  
        <includeCallerData>true</includeCallerData>  
        <appender-ref ref="file.all.other" />  
    </appender>  
    
	<appender name="EMAIL" class="ch.qos.logback.classic.net.SMTPAppender">
        <smtpHost>${smtpHost}</smtpHost>
        <smtpPort>${smtpPort}</smtpPort>
        <username>${username}</username>
        <password>${password}</password>
        <asynchronousSending>true</asynchronousSending>
        <SSL>${SSL}</SSL>
        <to>${email_to}</to>
        <from>${email_from}</from>
        <subject>${email_subject}</subject>
        <!-- 日志输出 html格式-->
        <!--
        <layout class="ch.qos.logback.classic.html.HTMLLayout">
                    <Pattern>%date%level%thread%logger{0}%line%message</Pattern>
                </layout>-->
        <layout class="ch.qos.logback.classic.html.HTMLLayout"></layout>
        
　　　　	 <!-- 这里采用等级过滤器 指定等级相符才发送 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
            <!-- 每个电子邮件只发一个日志条目 -->
            <bufferSize>2</bufferSize>
        </cyclicBufferTracker>
    </appender>
    
    <appender name="EMAILMarker" class="ch.qos.logback.classic.net.SMTPAppender">
        <smtpHost>${smtpHost}</smtpHost>
        <smtpPort>${smtpPort}</smtpPort>
        <username>${username}</username>
        <password>${password}</password>
        <asynchronousSending>true</asynchronousSending>
        <SSL>${SSL}</SSL>
        <to>${email_to}</to>
        <from>${email_from}</from>
        <subject>${email_subject}</subject>
         <layout class="ch.qos.logback.classic.html.HTMLLayout"></layout>
        <!-- 基于标记的发送邮件 这里我们加入一个标记DONE，发送日志时只需加入此标记即可，如有多个标记加入多个<maker></maker>标签即可 -->
        <evaluator class="ch.qos.logback.classic.boolex.OnMarkerEvaluator">
            <marker>DONE</marker>
        </evaluator>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker">
            <!-- 每个电子邮件只发一个日志条目 -->
            <bufferSize>1</bufferSize>
        </cyclicBufferTracker>
    </appender>
  
    <!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName -->  
    <logger name="com.tgc" additivity="false">  
        <level value="${log.root.level}" />  
        <appender-ref ref="stdout" />   
        <appender-ref ref="file.async" /><!-- 即com.tgc包下级别为 ${log.root.level}的才会使用file.async来打印 -->  
        <appender-ref ref="file.error" />  
    </logger>  
    
      <!--com.tgc：类的全路径 -->   
	  <logger name="com.tgc" level="ERROR" additivity="false">  
	    	<appender-ref ref="EMAIL"/> <!-- 注意要是ERROR级别才能配置成功 -->
	  </logger>  
	  
	  <logger name="com.tgc" level="INFO" additivity="false">  
	    	<appender-ref ref="EMAILMarker"/> <!-- 注意要是INFO级别才能配置成功 -->
	  </logger> 
      
    <!-- root将级别为${log.root.level}及大于${log.root.level}的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console,其它同理 -->  
    <root level="${log.root.level}">  
        <appender-ref ref="stdout" /> <!--  标识这个appender将会添加到这个logger -->  
        <appender-ref ref="file.async.other" />  
        <appender-ref ref="file.error" /> 
    </root>  
</configuration>